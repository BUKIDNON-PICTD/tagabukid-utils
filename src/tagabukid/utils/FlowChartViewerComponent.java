/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package tagabukid.utils;

import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxStylesheet;
import com.rameses.rcp.common.PropertySupport;
import com.rameses.rcp.framework.Binding;
import com.rameses.rcp.ui.UIControl;
import com.rameses.rcp.util.UIControlUtil;
import java.awt.BorderLayout;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author rufino
 */
public class FlowChartViewerComponent extends JPanel implements UIControl {
    private Binding binding;
    private String[] depends;
    private int index;
    private int stretchWidth;
    private int stretchHeight;
    /**
     * Creates new form FlowChartViewerComponent
     */
    private JPanel viewerComponentPanel = new JPanel();
    private final JPanel panel = new JPanel(new BorderLayout());
    private List userDefinedList;
    private int y = 40;
    private int x = 20;
    private int gap = 500;
    
    private static final long serialVersionUID = 672772281200016954L;
    
    public static final String MY_CUSTOM_VERTEX_STYLE = "MY_CUSTOM_VERTEX_STYLE";
    public static final String MY_CUSTOM_EDGE_STYLE = "MY_CUSTOM_EDGE_STYLE";
    
    public FlowChartViewerComponent() {
        initComponents();
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private static void setStyleSheet(mxGraph graph) {
        
        Hashtable<String, Object> style;
        mxStylesheet stylesheet = graph.getStylesheet();
        Hashtable<String, Object> edgeStyle = new Hashtable<String, Object>();
        //edgeStyle.put(mxConstants.STYLE_EDGE, mxConstants.EDGESTYLE_ORTHOGONAL);
        edgeStyle.put(mxConstants.STYLE_SHAPE,    mxConstants.SHAPE_CONNECTOR);
        edgeStyle.put(mxConstants.STYLE_ENDARROW, mxConstants.ARROW_CLASSIC);
        edgeStyle.put(mxConstants.STYLE_STROKECOLOR, "#000000");
        edgeStyle.put(mxConstants.STYLE_FONTCOLOR, "#000000");
        edgeStyle.put(mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, "#ffffff");
//        // base style
//        Hashtable<String, Object> baseStyle = new Hashtable<String, Object>();
//        baseStyle.put(mxConstants.STYLE_STROKECOLOR, "#FF0000");
//
//        // custom vertex style
//        style = new Hashtable<String, Object>(baseStyle);
////        style.put(mxConstants.STYLE_FILLCOLOR, "#FFFF00");
//        style.put(mxConstants.STYLE_WHITE_SPACE, "wrap");
//        stylesheet.putCellStyle(MY_CUSTOM_VERTEX_STYLE, style);
//
//        // custom edge style
//        style = new Hashtable<String, Object>(baseStyle);
//        style.put(mxConstants.STYLE_STROKEWIDTH, 1);
        stylesheet.putCellStyle(MY_CUSTOM_EDGE_STYLE, edgeStyle);
        
    }
    private void Move(int i){
        if ((i+1)%3 == 0){
            x+=200;
            if(gap > 0){
                gap = -500;
            }else{
                gap = 500;
            }
        }else{
            y+=gap;
        }
    }
    private void createChart(){
        
        mxGraph graph = new mxGraph();
        Object parent = graph.getDefaultParent();
        setStyleSheet(graph);
        graph.getModel().beginUpdate();
        try
        {

            Object a = new Object();
            Object b = new Object();
            LinkedHashMap<String, Object> edgeholder = null;
            int processing = 0;
            for (int i = 0; i < this.userDefinedList.size();i++){
                LinkedHashMap<String, Object> test = (LinkedHashMap<String, Object>) this.userDefinedList.get(i);
                if(test.get("state").equals("idle")){
                    a = graph.insertVertex(parent, null, test.get("title") + " : " + test.get("duration"), y, x, 160,80,"rounded=1;whiteSpace=wrap;fillColor=#00CC00;fontColor=#000000");
                    Move(processing);
                    processing ++;
                }else if (test.get("state").equals("archived")){
                    a = graph.insertVertex(parent, null, test.get("message") + " : " + test.get("duration"), y, x, 160,80,"rounded=1;whiteSpace=wrap;fillColor=#CC0000;fontColor=#000000");
                    Move(processing);
                    processing ++;
                    graph.insertEdge(parent, null, test.get("title") , b, a,MY_CUSTOM_EDGE_STYLE);
                }else if (test.get("state").equals("enroute")){
                    edgeholder = test;
                }else if (test.get("state").equals("redflag")){
                    edgeholder = test;
                }else if (test.get("state").equals("outgoing")){
                    edgeholder = test;
                }else{
                    a = graph.insertVertex(parent, null, test.get("title") + " : " + test.get("duration"), y, x, 160,80,"whiteSpace=wrap;fontColor=#000000");
                    Move(processing);
                    processing ++;
                }
               
                if(a!=b && edgeholder != null){
                    graph.insertEdge(parent, null, edgeholder.get("title") + " : " + edgeholder.get("duration"), b, a,MY_CUSTOM_EDGE_STYLE);
                    edgeholder = null;
                }
//                else if (a==b && edgeholder != null){
//                    a = graph.insertVertex(parent, null, edgeholder.get("name"), y, x, 160,80,"whiteSpace=wrap;fontColor=#000000");
//                    graph.insertEdge(parent, null, edgeholder.get("title"), b, a,MY_CUSTOM_EDGE_STYLE);
//                }
              
                b = a;
                
                //graph.updateCellSize(a[i]);
                
            }
            
            if (a==b && edgeholder != null){
                a = graph.insertVertex(parent, null, edgeholder.get("name") + " : " + edgeholder.get("duration"), y, x, 160,80,"whiteSpace=wrap;fontColor=#000000");
                graph.insertEdge(parent, null, edgeholder.get("title"), b, a,MY_CUSTOM_EDGE_STYLE);
            }

        }
        finally
        {
            graph.getModel().endUpdate();
        }
        
        mxGraphComponent graphComponent = new mxGraphComponent(graph);
//        viewerComponentPanel.add(graphComponent);
//        graphComponent.setConnectable(false);
        graphComponent.setEnabled(false);
        panel.add(graphComponent, BorderLayout.CENTER);
        setLayout(new BorderLayout());
        
        add(panel, BorderLayout.CENTER);
        
//                mxGraph graph = new mxGraph();
//		Object parent = graph.getDefaultParent();
//
//		graph.getModel().beginUpdate();
//		try
//		{
//
//                    Object v1 = graph.insertVertex(parent, null, "Hello", 20, 20, 80,30);
//                    Object v2 = graph.insertVertex(parent, null, "World!", 220, 20, 80, 30);
//                    Object v3 = graph.insertVertex(parent, null, "HEY!", 420, 20,80, 30);
//                    graph.insertEdge(parent, null, "Edge", v1, v2);
//                    graph.insertEdge(parent, null, "TEST", v2, v3);
//		}
//		finally
//		{
//			graph.getModel().endUpdate();
//		}
//
//		mxGraphComponent graphComponent = new mxGraphComponent(graph);
//		viewerComponentPanel.add(graphComponent);
//                
//                panel.add(graphComponent, BorderLayout.CENTER);
//                setLayout(new BorderLayout());
//                add(panel, BorderLayout.CENTER);
    }
    
    // Variables declaration - do not modify
    // End of variables declaration
    
    @Override
    public void load() {
        
    }
    
    
    @Override
    public void refresh() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                getData();
            }
        });
    }
    
    private void getData(){
//         DocViewModel newModel = null;
        try{
            this.userDefinedList = (List)UIControlUtil.getBeanValue(this);
            createChart();
        }
        catch (Exception ex)
        {
            //MsgBox.err(ex);
        }
    }
    
    @Override
    public Binding getBinding() {
        return this.binding; //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void setBinding(Binding binding) {
        this.binding = binding; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public String[] getDepends() {
        return this.depends = depends; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int getIndex() {
        return this.index = index; //To change body of generated methods, choose Tools | Templates.
    }
    
    public void setPropertyInfo(PropertySupport.PropertyInfo info) {
        
    }
    
    
    public int getStretchWidth() {
        return this.stretchWidth; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void setStretchWidth(int stretchWidth) {
        this.stretchWidth = stretchWidth; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int getStretchHeight() {
        return this.stretchHeight; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void setStretchHeight(int stretchHeight) {
        this.stretchHeight = stretchHeight; //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public int compareTo(Object o) {
        return UIControlUtil.compare(this, o); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getVisibleWhen() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setVisibleWhen(String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
